DB_USER = "postgres"
DB_PASSWORD = "login@123"
DB_HOST = "localhost"
DB_PORT = "5432"
DB_NAME = "postgres"

DATABASE_URL = f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD.replace('@', '%40')}@{DB_HOST}:{DB_PORT}/{DB_NAME}"


engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()


# ---------- MODEL ----------
class Admission(Base):
    __tablename__ = "admissions"
    __table_args__ = {"schema": "public"}

    id = Column(Integer, primary_key=True, index=True)
    admission_date = Column(Date)
    student_name = Column(String)
    email = Column(String)
    mobile_number = Column(String)
    channel = Column(String)
    branch = Column(String)
    course = Column(String)
    total_fees = Column(Integer)
    fees_paid = Column(Integer)


Base.metadata.create_all(bind=engine)


# ---------- STATE ----------
class AdmissionFormState(rx.State):
    # your existing fields here like:
    admission_date: str = ""
    student_name: str = ""
    email: str = ""
    mobile_number: str = ""
    channel: str = ""
    branch: str = ""
    course: str = ""
    total_fees: str = ""
    fees_paid: str = ""

    # # Dropdown options
    # channel_options = ["Online", "Offline", "Referral"]
    # branch_options = ["Andheri", "Thane", "Borivali"]
    # course_options = ["BMS", "BAF", "BBI"]
    def reset_form(self):
        """Reset all form fields (including dropdowns)"""
        self.admission_date = ""
        self.student_name = ""
        self.email = ""
        self.mobile_number = ""
        self.channel = ""
        self.branch = ""
        self.course = ""
        self.total_fees = ""
        self.fees_paid = ""

    def handle_submit(self, form_data: dict):
        """Handle form submission and save to DB"""
        try:
            session = SessionLocal()

            def clean_str(v):
                return str(v) if v else ""

            def clean_int(v):
                try:
                    return int(v)
                except:
                    return 0

            def clean_date(v):
                try:
                    return datetime.strptime(v, "%Y-%m-%d").date()
                except:
                    return None

            student_name = clean_str(form_data.get("student_name"))
            email = clean_str(form_data.get("email"))
            mobile_number = clean_str(form_data.get("mobile_number"))

            # ‚úÖ Prevent duplicate entries
            existing = (
                session.query(Admission)
                .filter_by(
                    student_name=student_name,
                    email=email,
                    mobile_number=mobile_number,
                )
                .first()
            )
            if existing:
                session.close()
                return rx.toast.error("‚ùå This student record already exists!")

            # ‚úÖ Create new record
            new_entry = Admission(
                admission_date=clean_date(form_data.get("admission_date")),
                student_name=student_name,
                email=email,
                mobile_number=mobile_number,
                channel=clean_str(form_data.get("channel")),
                branch=clean_str(form_data.get("branch")),
                course=clean_str(form_data.get("course")),
                total_fees=clean_int(form_data.get("total_fees")),
                fees_paid=clean_int(form_data.get("fees_paid")),
            )

            session.add(new_entry)
            session.commit()
            session.close()

            # ‚úÖ Success toast
            yield rx.toast.success("‚úÖ Admission saved successfully!")

            # ‚úÖ RESET FORM STATE (inputs + dropdowns)
            yield self.reset_form()

        except Exception as e:
            print("Error:", e)
            yield rx.toast.error(f"‚ùå Failed to save: {e}")




# ---------- UI ----------
def admission_form():
    return rx.center(
        rx.card(
            rx.vstack(
                rx.box(
                    rx.text(
                        "üéì Admission Form",
                        size="8",
                        font_weight="bold",
                        text_align="center",
                        bg_clip="text",
                        _dark={"color" : "rgba(255,255,255,0.5)"},
                        bg_gradient="to-r, blue.600, cyan.400",
                        
                    ),
                    align_items = "center",
                    justify_content = "center",
                    width = "100%"
                    
                ),
                rx.form.root(
                    rx.vstack(
                        rx.form.field(
                            rx.form.label("Date of Admission"),
                            rx.input(name="admission_date", type="date", required=True),
                            width="9%",
                        ),
                        rx.hstack(
                            rx.form.field(
                                rx.form.label("Student Name"),
                                rx.input(name="student_name", required=True),
                                width ="100%"
                            ),
                            rx.form.field(
                                rx.form.label("Email"),
                                rx.input(name="email", type="email", required=True),
                                width ="100%"
                            ),
                            rx.form.field(
                                rx.form.label("Contact Number"),
                                rx.input(name="mobile_number", required=True),
                                width ="100%"
                            ),
                            width="100%",
                        ),
                        rx.hstack(
                            rx.form.field(
                                rx.form.label("Select Channel"),
                                rx.select(
                                    ["Online", "Offline"],
                                    name="channel",
                                    # on_change=AdmissionFormState.set_channel,
                                    required=True,
                                ),
                                width = "100%"
                            ),
                            rx.form.field(
                                rx.form.label("Select Branch"),
                                rx.select(
                                    ["Delhi", "Varansi","Kanpur","Lucknow"],
                                    name="branch",
                                    # on_change=AdmissionFormState.set_branch,
                                    required=True,
                                ),
                                width = "100%"
                            ),
                            rx.form.field(
                                rx.form.label("Select Course"),
                                rx.select(
                                    ["Power Bi", "Data Analyst","Data Science","Data Science & AI"],
                                    name="course",
                                    # on_change=AdmissionFormState.set_course,
                                    required=True,
                                ),
                                width = "100%"
                            ),
                            width="100%",
                        ),
                        rx.hstack(
                            rx.form.field(
                                rx.form.label("Course Fees"),
                                rx.input(name="total_fees", type="number", required=True),
                            ),
                            rx.form.field(
                                rx.form.label("Fees Paid"),
                                rx.input(name="fees_paid", type="number", required=True),
                            ),
                            width="100%",
                        ),
                        rx.button(
                            "Submit",
                            type="submit",
                            color_scheme="blue",
                            width="20%",
                            align_self="center",
                            margin_top="1.5em",
                            font_weight="bold",
                            transition="all 0.4s ease",
                            # normal look
                            bg="linear-gradient(90deg, #3b82f6, #06b6d4, #3b82f6)",
                            color="white",
                            border_radius="12px",
                            _hover={
                                # sparkle gradient effect
                                "backgroundImage": "linear-gradient(270deg, #06b6d4, #3b82f6, #a855f7, #06b6d4)",
                                "backgroundSize": "400% 400%",
                                "animation": "sparkle 2s linear infinite, glowPulse 1.5s ease-in-out infinite",
                                "transform": "scale(1.05)",
                            },
                        )
                        ,
                        spacing="4",
                        padding="4",
                    ),
                    on_submit=AdmissionFormState.handle_submit,
                    reset_on_submit=True,
                ),
                spacing="5",
                padding="6",
            ),
            width="70%",
            padding="8",
            border_radius="2xl",
            background_color="white",
            box_shadow="0 10px 33px rgba(0, 0, 0, 0.20)",   # üíé custom strong shadow
            _hover={
                "box_shadow": "0 12px 40px rgba(0, 0, 0, 0.25)",  # subtle hover depth
                "transform": "translateY(-4px)",
                "transition": "all 0.3s ease-in-out",
            },
        ),
        padding_top="6em",
        width="100%",
        height="100vh",
        bg="linear-gradient(to bottom right, #f8f9fa, #e9ecef)",
    )


@rx.page()
def index():
    return admission_form()

theme = rx.theme(
    extend_theme={
        "styles": {
            "global": {
                # Sparkle keyframes
                "@keyframes sparkle": {
                    "0%": {"backgroundPosition": "0% 50%"},
                    "50%": {"backgroundPosition": "100% 50%"},
                    "100%": {"backgroundPosition": "0% 50%"},
                },
                # Glow keyframes for shine effect
                "@keyframes glowPulse": {
                    "0%, 100%": {"boxShadow": "0 0 10px rgba(255,255,255,0.1)"},
                    "50%": {"boxShadow": "0 0 25px rgba(59,130,246,0.5)"},
                },
            }
        }
    }
)

app = rx.App(theme=theme)
app.add_page(index)